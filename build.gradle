// Top-level build file where you can add configuration options common to all
// sub-projects/modules.
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.1'
    }
}
allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}
apply plugin: 'com.android.application'
repositories {
    maven {
        url "http://jitsi.github.com/otr4j/repository/"
    }
    jcenter()
    mavenCentral()
}
dependencies {
    compile project(':libs:openpgp-api-lib')
    compile project(':libs:MemorizingTrustManager')
    compile 'com.android.support:support-v13:21.0.3'
    compile 'org.bouncycastle:bcprov-jdk15on:1.50'
    compile 'net.java:otr4j:0.22'
    compile 'org.gnu.inet:libidn:1.15'
    compile 'com.google.zxing:core:3.1.0'
    compile 'com.google.zxing:android-integration:3.1.0'
    compile 'de.measite.minidns:minidns:0.1.3'
    compile project(':bonofaAPI')
    compile project(':angelsMedia')
    compile 'com.google.android.gms:play-services:6.5.87'
    compile project(':bonofaGcm')
    compile project(':transmit7lib')
    compile project(':bonofaTheme')
}
android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 43
        versionName "1.0-beta2"
        applicationId 'com.bonofa.messenger7_conversations'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
//
// To sign release builds, create the file `gradle.properties` in
// $HOME/.gradle or in your project directory with this content:
//
// mStoreFile=/path/to/key.store
// mStorePassword=xxx
// mKeyAlias=alias
// mKeyPassword=xxx
//
    if (project.hasProperty('mDebugStoreFile') &&
            project.hasProperty('mDebugStorePassword') &&
            project.hasProperty('mDebugKeyAlias') &&
            project.hasProperty('mDebugKeyPassword')) {
        signingConfigs {
            debug {
                storeFile file(project.getProperties().get('mDebugStoreFile'))
                storePassword project.getProperties().get('mDebugStorePassword')
                keyAlias project.getProperties().get('mDebugKeyAlias')
                keyPassword project.getProperties().get('mDebugKeyPassword')
            }
        }
    }
    if (project.hasProperty('mReleaseStoreFile') &&
            project.hasProperty('mReleaseStorePassword') &&
            project.hasProperty('mReleaseKeyAlias') &&
            project.hasProperty('mReleaseKeyPassword')) {
        signingConfigs {
            release {
                storeFile file(project.getProperties().get('mReleaseStoreFile'))
                storePassword project.getProperties().get('mReleaseStorePassword')
                keyAlias project.getProperties().get('mReleaseKeyAlias')
                keyPassword project.getProperties().get('mReleaseKeyPassword')
            }
        }
    }
    applicationVariants.all { variant ->
        if (variant.name.equals('release')) {
            variant.outputs.each { output ->
                if (output.zipAlign != null) {
                    output.zipAlign.outputFile = new File(output.outputFile.parent, rootProject.name + "-${variant.versionName}.apk")
                }
                output.packageApplication.outputFile = new File(output.outputFile.parent, output.packageApplication.outputFile.name
                        .replace(".apk", "-${variant.versionName}.apk"))
            }
        }
    }
    lintOptions {
        disable 'ExtraTranslation', 'MissingTranslation', 'InvalidPackage'
    }
    subprojects {
        afterEvaluate {
            if (getPlugins().hasPlugin('android') ||
                    getPlugins().hasPlugin('android-library')) {
                configure(android.lintOptions) {
                    disable 'AndroidGradlePluginVersion', 'MissingTranslation'
                }
            }
        }
    }
    productFlavors {
    }
}